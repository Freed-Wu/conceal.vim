""
" @section Introduction, intro
" @library
" <doc/@plugin(name).txt> is generated by <https://github.com/google/vimdoc>.
" See <README.md> for more information about installation and screenshots.

let s:path = fnamemodify(resolve(expand('<sfile>:p')), ':h:h')
let s:json_dir = s:path . '/assets/json'

""
" Get json.
function! conceal#get_json(json_name) abort
  let l:json = s:json_dir . '/' . a:json_name . '.json'
  let l:result = json_decode(join(readfile(l:json), ''))
  return l:result
endfunction

""
" https://github.com/markdown-templates/markdown-emojis
function! conceal#emoji() abort
  for [s:name, s:emoji] in items(conceal#get_json('emoji'))
    execute "syntax match markdownEmoji ':" . s:name . ":' conceal cchar=" . split(s:emoji, '\zs')[0]
  endfor
endfunction

""
" https://mateam.net/html-escape-characters/
function! conceal#escape() abort
  for l:vs in values(conceal#get_json('escape'))
    for l:v in l:vs[1:]
      if l:vs[0] !=# ''
        let l:cchar = 'cchar=' . l:vs[0]
      endif
      execute "syntax match Entity '" . l:v . "' conceal" l:cchar
    endfor
  endfor
endfunction

""
" https://fontawesome.com/v5/cheatsheet/pro/
"
" https://fontawesome.com/v5/cheatsheet/pro/brands
function! conceal#fontawesome_html() abort
  for [s:k, s:v] in items(conceal#get_json('fontawesome'))
    let s:re = '<i class="[^"]*\<fa-' . s:k . '\>[^"]*">'
    execute "syntax region htmlFontawesome start='" . s:re . "' end='</i\\_s*>' conceal cchar=" . s:v
  endfor
endfunction

""
" Same as |conceal#fontawesome#html|.
function! conceal#fontawesome_tex() abort
  for [s:k, s:v] in items(conceal#get_json('fontawesome'))
    let s:re = ''
    " first char is not a number
    if index(map(range(10), {v -> v . ''}), s:k[0]) == -1
      if s:k[-4:] ==# '-alt'
        let s:name = s:k[:-5] . '\*'
      else
        let s:name = s:k . '\>'
      endif
      let s:re .= '\\fa' . substitute(s:name, '\%(^\|-\)\(.\)', '\u\1', 'g') . '\|'
    endif
    let s:re .= '\\faIcon\%\(\[\%\(regular\|solid\)]\|\){' . s:k . '}'
    if s:k[-4:] ==# '-alt'
      let s:re .= '\\faIcon\*\%\(\[\%\(regular\|solid\)]\|\){' . s:k[:-5] . '}'
    endif
    execute "syn match texCmd '" . s:re . "' conceal cchar=" . s:v
  endfor
endfunction
